<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Matlab | Blog to be better everyday]]></title>
  <link href="http://donngchao.github.io/blog/categories/matlab/atom.xml" rel="self"/>
  <link href="http://donngchao.github.io/"/>
  <updated>2017-01-19T11:15:40+08:00</updated>
  <id>http://donngchao.github.io/</id>
  <author>
    <name><![CDATA[LAWES]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Avi Video Processing]]></title>
    <link href="http://donngchao.github.io/blog/2017/01/13/simulink-details/"/>
    <updated>2017-01-13T18:32:57+08:00</updated>
    <id>http://donngchao.github.io/blog/2017/01/13/simulink-details</id>
    <content type="html"><![CDATA[<blockquote><p>在交通运输、工业生产、通信广播、生物医药、遥感测绘等工程应用以及科学研究领域中，常常需要将采集到的视频影像以AVI格式存储为数字视频文件再进行分析和处理，由于运动图像是由一帧帧静态图像组成的，因此视频文件的数据量是非常大的，这给信息的存储、分析、处理和传输都带来了一定的困难。在一些文献中介绍了用VC++以及其他工具实现了对AVI文件的分析和处理，编程比较复杂。而Matlab是以矩阵为运算基础的计算软件，最适宜处理诸如图像等二维信息。那么究竟怎样使用Matlab分析和处理AVI视频图像的方法。</p></blockquote>

<p>音视频交错AVI是Microsoft公司开发的一种符合资源互换文件格式RIFF的数字音频和视频文件格式，多用于视音频的捕捉、编辑、回放等应用程序中。一个AVI文件可以包含多个不同类型的媒体流，它以一系列的位图来存储视频信息，并在文件中加入数字形式存储的视频信息，实际上是由一组信息流组成的文件。</p>

<pre><code class="matlab This is how to read in avi format video">
fp = fopen('shuttle.avi');%打开AVI文件

fseek(fp,12,0);%跳过文件的头数据

Info_Start = fscanf(fp,'%c',4);%信息块的起始标记

Info_Size = fread(fp,1,'uint32');%信息块的大小

fseek (fp,44,0);

dwWidth = fread(fp,1,'uint32');%视频图像的宽度（像素数）

dwHeight = fread(fp,1,'uint32');%视频图像的高度（像素数）

fseek(fp,Info_Size - 52,0);%跳过信息块数据

Movi_stat = fscanf(fp,'%c',4);%数据块起始标记‘LIST’
</code></pre>

<blockquote><p>readFrame</p>

<p>Read video frame from video file
 close Finish writing and close video file.</p>

<p> close(OBJ)</p>

<p> closes the file associated with video</p>

<p> writer object OBJ.</p>

<p> writeVideo(v,img) writes data from an array to the video file associated with v.</p></blockquote>

<pre><code class="matlab Use haar method deal with video">
fileinfo = VideoReader('shuttle.avi');%读取文件信息

mov0 = VideoWriter('compressed');%创建新的输出文件

open(mov0);

i = 1;

mov1 = VideoReader('shuttle.avi');%读取其中的每一帧

while(mov1.hasFrame)  %每次处理其中一帧

    temp = readFrame(mov1);%将其中的一帧存到temp

    imwrite(temp,strcat('m',int2str(i),'.bmp'),'bmp');%将视频帧转换成bmp图像文件

    Ar = temp(:,:,1);%分离红色分量

    Ag = temp(:,:,2);%分离绿色分量

    Ab = temp(:,:,3);%分离蓝色分量

    [cAr,cHr,cVr,cDr] = dwt2(double(Ar),'haar');%红色分量二维haar小波变换

    [cAg,cHg,cVg,cDg] = dwt2(double(Ag),'haar');%绿色分量二维haar小波变换

    [cAb,cHb,cVb,cDb] = dwt2(double(Ab),'haar');%蓝色分量二维haar小波变换

    mov(:,:,1) = [cAr,cHr,cVr,cDr];

    mov(:,:,2) = [cAg,cHg,cVg,cDg];

    mov(:,:,3) = [cAb,cHb,cVb,cDb];

    imwrite(uint8(mov),strcat('new',int2str(i),'.bmp'),'bmp'); %处理后的每一帧图片   

    writeVideo(mov0,uint8(mov)); %将处理后的帧写入到新的视频文件中

    i= i + 1;

end

close(mov0);
</code></pre>

<blockquote><p>根据AVI文件的内部结构，利用Matlab提供的函数，尤其是专用的音频和视频处理函数，可以方便地将AVI文件中的图像信息提取出来并存储为一组静态图片，然后再进行变换、压缩等其他分析和处理。</p>

<p>当然也可以根据需要提取文件中的其他信息，还可以按不同的参数将一系列静态图片合并写入一个新的AVI文件。该方法编程简单、操作方便、实用性强、数据处理可靠、程序运行较快。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Matlab to Deal With Video]]></title>
    <link href="http://donngchao.github.io/blog/2017/01/12/using-matlab-to-deal-with-video/"/>
    <updated>2017-01-12T16:29:28+08:00</updated>
    <id>http://donngchao.github.io/blog/2017/01/12/using-matlab-to-deal-with-video</id>
    <content type="html"><![CDATA[<h1>About video compression</h1>

<h2>Used technologies</h2>

<ul>
<li>DCT</li>
<li>Motion Compensation</li>
<li>Quantization</li>
</ul>


<p>This example shows how to compress a video using motion compensation and discrete cosine transform (DCT) techniques.</p>

<p>The example calculates motion vectors between successive frames and uses them to reduce redundant information.</p>

<p>Then it divides each frame into submatrices and applies the discrete cosine transform to each submatrix. Finally, the example applies a quantization technique to achieve further compression.</p>

<p>The Decoder subsystem performs the inverse process to recover the original video.</p>

<h2>About encoder subsystem</h2>

<p><strong>我们首先需要构建的是编码系统：</strong></p>

<p>本例子的目的是利用运动补偿和离散傅里叶变换的技术来实现对视频数据的压缩。</p>

<p>通过计算连续的帧之间的运动向量来减少冗余的信息。</p>

<p>同时将每一帧的图片分割成小的矩阵，然后再对每个小的矩阵应用离散傅里叶变换。</p>

<p>最后要说的不是最不重要的，就是使用量化的技术来实现进一步的压缩。</p>

<h2>About decoder subsystem</h2>

<p><strong>对于解码系统：</strong></p>

<p>将上述提到的整个过程逆着运行一遍即可。</p>

<p>The Block Processing block sends 16-by-16 submatrices of each video frame to the Block Processing block&rsquo;s subsystem for processing.</p>

<p>Within this subsystem, the model applies a motion compensation technique and the DCT to the video stream.</p>

<p>By discarding many high-frequency coefficients in the DCT output, the example reduces the bit rate of the input video.</p>

<p>块处理器将每个视频帧的16*16的子矩阵发送到块处理器的子系统进行处理。</p>

<p>在子系统中，整个模型对于视频流采用了运动补偿技术以DCT技术。</p>

<p>通过丢弃DCT的输出中的高频部分，本例子尝试减少输入视频的码率。</p>

<p>这里面会用到simulink的相关知识，这一块需要进一步的学习。</p>

<p>The Decoded window shows the compressed video stream.</p>

<p>You can see that the compressed video is not as clear as the original video, shown in the Original window, but it still contains many of its features.</p>

<p>解码的窗口显示的是压缩后的视频流，可以看到压缩后的视频不如原始的视频那么清晰，但是仍然含有原始视频的</p>

<p>大多数特征。</p>

<h2>About simulink</h2>

<p>找到模型相关的例子，研究例子的搭建原理，修改其中的某些参数，观察结果。遇到问题再修改。</p>

<h2>Summary</h2>

<p><strong>总结</strong></p>

<p>前面提到了video compression 的相关技术背景，至于怎样实现呢？ 需要进一步的分析simulink在其中扮演的</p>

<p>角色。</p>

<blockquote><p>通过查阅相关的参考文献，得到了有的算法达到的效果如下：</p>

<p>针对YUV视频格式的特殊性，对于YUV三个分量分别进行压缩，充分利用U,V数据的高内聚性，进而减少迭代次数，降低数据量。对Y分量给予更多次的迭代，充分保证Y的峰值信噪比。通过最终的仿真实验证明，本文提出的张量方法相比较于H.264方法，视频的PSNR（峰值信噪比）和平均码率均有所降低，尤其对于在水平、垂直、帧长方向有大量冗余的数据来说效果更加明显。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thesis Principle]]></title>
    <link href="http://donngchao.github.io/blog/2017/01/10/thesis-principle/"/>
    <updated>2017-01-10T14:26:49+08:00</updated>
    <id>http://donngchao.github.io/blog/2017/01/10/thesis-principle</id>
    <content type="html"><![CDATA[<h1>Image Processing</h1>

<h2>Numerical Analysis</h2>

<p><strong>Matrix</strong></p>

<p><code>IMAGE</code></p>

<ul>
<li>What is image

<ul>
<li>pixals</li>
<li>matrix</li>
</ul>
</li>
<li>Matlab</li>
</ul>


<blockquote><p>Reference</p>

<p>Create matrix C. Display an image of the data in C. Add a colorbar to the graph to show the current colormap.</p></blockquote>

<ul>
<li>Create matrix C. Display an image of the data in C. Add a colorbar to the graph to show the current colormap.</li>
</ul>


<p><figure class='code'><figcaption><span>This is image processing in  Matlab </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='matlab'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">C</span> <span class="p">=</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">6</span><span class="p">;</span> <span class="mi">8</span> <span class="mi">10</span> <span class="mi">12</span> <span class="mi">14</span><span class="p">;</span> <span class="mi">16</span> <span class="mi">18</span> <span class="mi">20</span> <span class="mi">22</span><span class="p">];</span>
</span><span class='line'><span class="n">image</span><span class="o">&amp;</span><span class="n">copy</span><span class="p">;</span>
</span><span class='line'><span class="n">colorbar</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Read a JPEG image file</li>
</ul>


<p>imread returns a 650-by-600-by-3 array, C.</p>

<p><figure class='code'><figcaption><span>show images in Matlab </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='matlab'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">C</span> <span class="p">=</span> <span class="n">imread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">ngc6543a</span><span class="p">.</span><span class="n">jpg</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="n">image</span><span class="o">&amp;</span><span class="n">copy</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>图像压缩</li>
</ul>


<p>一幅实用的数字图像的数据量是非常巨大的，这给图像的传输和存储带来了相当大的困难。鉴于此，人们自然会考虑下面的问题，在满足一定的图像质量的条件下，能否减少图像的比特数，最少能少到多少，用什么方法减少等。于是，图像压缩技术应运而生。图像数据压缩在较多的情况下是为了有效的存储和传输，减小图像中的冗余信息的编码技术，随着网络技术的发展和图像、视频需求量的增大，图像压缩的应用和研究日益广泛。</p>

<p>图像数据压缩过程或者系统无论采用什么具体的结构和技术，从原理来讲有变换、量化、编码3个环节。</p>

<p>首先，对于原始图像进行某种形式的变换或对数据形式简单整理，这里的变换是广义的，变换的作用是根据数据的统计特征将原始图像用另一种形式在一个新域中表示，改变图像数据的特性，使得在变换域中的图像能用较少的像点或者较少的比特数表示。</p>

<p>然后对变换结果进行量化，量化的目的是以降低准确率为代价增加压缩比。</p>

<p>现有的量化方法主要可分为标量量化和矢量量化，对量化器的要求是在一定的允许客观误差或助管察觉图像损伤条件下，总的量化等级数尽量少，并便于实现。</p>

<p>最后，编码器的编码方式应和信号的概率特性相适应以求得较大的压缩比且抗干扰性强。</p>

<p>为了便于图像能高质、高速或小容量地传输或存储，图像压缩的基本技术要求是在无失真或允许一定失真条件下，尽量用较少的比特数，并且具有较强的抗扰能力。这三个技术指标往往是相互制约的，例如，一味的追求比特数较少可能要产生失真和抗扰性差。在实际问题中，要综合考虑这三个指标，以达到总体最优。</p>

<p>根据信息损失程度，图像压缩方法可以分为客观无损压缩、主观无损压缩和主观有损压缩，客观无损压缩主要用于像医学图像处理，技术图纸，剪贴画或者连环画等。</p>

<p>其余两种有损压缩主要应用于摄像等对少量信息损失不敏感的领域。</p>

<ul>
<li>客观无损压缩</li>
</ul>


<p>现有的客观无损压缩的方法有：行程编码，主要用于PCX类图像，有望推广到位图、标签图像等文件格式；预测差值编码等预测编码技术，例如李进等针对高光谱图像采用中值预测器和两步双向预测算法，并与参考预测值比较得出一种改进的预测编码算法；Huffman于1951年提出霍夫曼编码，根据图像的灰度直方图特征，用最小比特数的编码表征最经常出现的灰度级，用更大比特数的编码表征次常出现的灰度级，以此类推，以达到总比特数最小化的目的；利用图像相关信息的马尔科夫模型，该模型将某一位置像素及其灰度定义为一个由领域像素决定的函数，最简单的情况由一阶马尔科夫模型定义，此方法还可以扩展到高阶；矢量编码与霍夫曼编码类似，只是将像素成对处理，形成矢量，不同的图像需要不同的矢量编码才有效率；改进的霍夫曼编码将出现概率很低的码字一律用“ELSE”代替，以提高编码效率；</p>
]]></content>
  </entry>
  
</feed>
