<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Matlab | Blog to be better everyday]]></title>
  <link href="http://donngchao.github.io/blog/categories/matlab/atom.xml" rel="self"/>
  <link href="http://donngchao.github.io/"/>
  <updated>2017-01-14T00:00:02+08:00</updated>
  <id>http://donngchao.github.io/</id>
  <author>
    <name><![CDATA[LAWES]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Avi Video Processing]]></title>
    <link href="http://donngchao.github.io/blog/2017/01/13/simulink-details/"/>
    <updated>2017-01-13T18:32:57+08:00</updated>
    <id>http://donngchao.github.io/blog/2017/01/13/simulink-details</id>
    <content type="html"><![CDATA[<blockquote><p>在交通运输、工业生产、通信广播、生物医药、遥感测绘等工程应用以及科学研究领域中，常常需要将采集到的视频影像以AVI格式存储为数字视频文件再进行分析和处理，由于运动图像是由一帧帧静态图像组成的，因此视频文件的数据量是非常大的，这给信息的存储、分析、处理和传输都带来了一定的困难。在一些文献中介绍了用VC++以及其他工具实现了对AVI文件的分析和处理，编程比较复杂。而Matlab是以矩阵为运算基础的计算软件，最适宜处理诸如图像等二维信息。那么究竟怎样使用Matlab分析和处理AVI视频图像的方法。</p></blockquote>

<p>音视频交错AVI是Microsoft公司开发的一种符合资源互换文件格式RIFF的数字音频和视频文件格式，多用于视音频的捕捉、编辑、回放等应用程序中。一个AVI文件可以包含多个不同类型的媒体流，它以一系列的位图来存储视频信息，并在文件中加入数字形式存储的视频信息，实际上是由一组信息流组成的文件。</p>

<pre><code class="matlab This is how to read in avi format video">
fp = fopen('shuttle.avi');%打开AVI文件

fseek(fp,12,0);%跳过文件的头数据

Info_Start = fscanf(fp,'%c',4);%信息块的起始标记

Info_Size = fread(fp,1,'uint32');%信息块的大小

fseek (fp,44,0);

dwWidth = fread(fp,1,'uint32');%视频图像的宽度（像素数）

dwHeight = fread(fp,1,'uint32');%视频图像的高度（像素数）

fseek(fp,Info_Size - 52,0);%跳过信息块数据

Movi_stat = fscanf(fp,'%c',4);%数据块起始标记‘LIST’
</code></pre>

<blockquote><p>readFrame</p>

<p>Read video frame from video file
 close Finish writing and close video file.</p>

<p> close(OBJ)</p>

<p> closes the file associated with video</p>

<p> writer object OBJ.</p>

<p> writeVideo(v,img) writes data from an array to the video file associated with v.</p></blockquote>

<pre><code class="matlab Use haar method deal with video">
fileinfo = VideoReader('shuttle.avi');

mov0 = VideoWriter('compressed.avi');

open(mov0);

i = 1;

mov1 = VideoReader('shuttle.avi');

while(mov1.hasFrame)  

    temp = readFrame(mov1);

    imwrite(temp,strcat('m',int2str(i),'.bmp'),'bmp');

    Ar = temp(:,:,1);

    Ag = temp(:,:,2);

    Ab = temp(:,:,3);

    [cAr,cHr,cVr,cDr] = dwt2(double(Ar),'haar');

    [cAg,cHg,cVg,cDg] = dwt2(double(Ag),'haar');

    [cAb,cHb,cVb,cDb] = dwt2(double(Ab),'haar');

    mov(:,:,1) = [cAr,cHr,cVr,cDr];

    mov(:,:,2) = [cAg,cHg,cVg,cDg];

    mov(:,:,3) = [cAb,cHb,cVb,cDb];    

    writeVideo(mov0,uint8(mov)); %There is some problem   

    i= i + 1;
end
close(mov0);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Matlab to Deal With Video]]></title>
    <link href="http://donngchao.github.io/blog/2017/01/12/using-matlab-to-deal-with-video/"/>
    <updated>2017-01-12T16:29:28+08:00</updated>
    <id>http://donngchao.github.io/blog/2017/01/12/using-matlab-to-deal-with-video</id>
    <content type="html"><![CDATA[<h1>About video compression</h1>

<h2>Used technologies</h2>

<ul>
<li>DCT</li>
<li>Motion Compensation</li>
<li>Quantization</li>
</ul>


<p>This example shows how to compress a video using motion compensation and discrete cosine transform (DCT) techniques.</p>

<p>The example calculates motion vectors between successive frames and uses them to reduce redundant information.</p>

<p>Then it divides each frame into submatrices and applies the discrete cosine transform to each submatrix. Finally, the example applies a quantization technique to achieve further compression.</p>

<p>The Decoder subsystem performs the inverse process to recover the original video.</p>

<h2>About encoder subsystem</h2>

<p><strong>我们首先需要构建的是编码系统：</strong></p>

<p>本例子的目的是利用运动补偿和离散傅里叶变换的技术来实现对视频数据的压缩。</p>

<p>通过计算连续的帧之间的运动向量来减少冗余的信息。</p>

<p>同时将每一帧的图片分割成小的矩阵，然后再对每个小的矩阵应用离散傅里叶变换。</p>

<p>最后要说的不是最不重要的，就是使用量化的技术来实现进一步的压缩。</p>

<h2>About decoder subsystem</h2>

<p><strong>对于解码系统：</strong></p>

<p>将上述提到的整个过程逆着运行一遍即可。</p>

<p>The Block Processing block sends 16-by-16 submatrices of each video frame to the Block Processing block&rsquo;s subsystem for processing.</p>

<p>Within this subsystem, the model applies a motion compensation technique and the DCT to the video stream.</p>

<p>By discarding many high-frequency coefficients in the DCT output, the example reduces the bit rate of the input video.</p>

<p>块处理器将每个视频帧的16*16的子矩阵发送到块处理器的子系统进行处理。</p>

<p>在子系统中，整个模型对于视频流采用了运动补偿技术以DCT技术。</p>

<p>通过丢弃DCT的输出中的高频部分，本例子尝试减少输入视频的码率。</p>

<p>这里面会用到simulink的相关知识，这一块需要进一步的学习。</p>

<p>The Decoded window shows the compressed video stream.</p>

<p>You can see that the compressed video is not as clear as the original video, shown in the Original window, but it still contains many of its features.</p>

<p>解码的窗口显示的是压缩后的视频流，可以看到压缩后的视频不如原始的视频那么清晰，但是仍然含有原始视频的</p>

<p>大多数特征。</p>

<h2>About simulink</h2>

<p>找到模型相关的例子，研究例子的搭建原理，修改其中的某些参数，观察结果。遇到问题再修改。</p>

<h2>Summary</h2>

<p><strong>总结</strong></p>

<p>前面提到了video compression 的相关技术背景，至于怎样实现呢？ 需要进一步的分析simulink在其中扮演的</p>

<p>角色。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thesis Principle]]></title>
    <link href="http://donngchao.github.io/blog/2017/01/10/thesis-principle/"/>
    <updated>2017-01-10T14:26:49+08:00</updated>
    <id>http://donngchao.github.io/blog/2017/01/10/thesis-principle</id>
    <content type="html"><![CDATA[<h1>Image Processing</h1>

<h2>Numerical Analysis</h2>

<p><strong>Matrix</strong></p>

<p><code>IMAGE</code></p>

<ul>
<li>What is image

<ul>
<li>pixals</li>
<li>matrix</li>
</ul>
</li>
<li>Matlab</li>
</ul>


<blockquote><p>Reference</p>

<p>Create matrix C. Display an image of the data in C. Add a colorbar to the graph to show the current colormap.</p></blockquote>

<ul>
<li>Create matrix C. Display an image of the data in C. Add a colorbar to the graph to show the current colormap.</li>
</ul>


<p><figure class='code'><figcaption><span>This is image processing in  Matlab </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='matlab'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">C</span> <span class="p">=</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">6</span><span class="p">;</span> <span class="mi">8</span> <span class="mi">10</span> <span class="mi">12</span> <span class="mi">14</span><span class="p">;</span> <span class="mi">16</span> <span class="mi">18</span> <span class="mi">20</span> <span class="mi">22</span><span class="p">];</span>
</span><span class='line'><span class="n">image</span><span class="o">&amp;</span><span class="n">copy</span><span class="p">;</span>
</span><span class='line'><span class="n">colorbar</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Read a JPEG image file</li>
</ul>


<p>imread returns a 650-by-600-by-3 array, C.</p>

<p><figure class='code'><figcaption><span>show images in Matlab </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='matlab'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">C</span> <span class="p">=</span> <span class="n">imread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">ngc6543a</span><span class="p">.</span><span class="n">jpg</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="n">image</span><span class="o">&amp;</span><span class="n">copy</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
